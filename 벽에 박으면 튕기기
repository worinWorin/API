#include <windows.h>
#include "resource.h"

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);                  // CALLBACK 매크로
HINSTANCE g_hInst;                                                     // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("김연우_16032018");                           // 제목 표시줄의 내용 

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance
	, LPSTR lpszCmdParam, int nCmdShow)                                // main 함수
{
	HWND hWnd;                                                         // 원도우 핸들 선언
	MSG Message;                                                       // 메세지 구조체 변수 선언
	WNDCLASS WndClass;                                                 // Window Class 구조체 변수 선언
	g_hInst = hInstance;                                               // hinstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0;                                           // 예약 영역
	WndClass.cbWndExtra = 0;                                           // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);      // 원도우의 배경 색상 
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);                    // 원도우의 마우스 포인터 모양 
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);                  // 원도우의 커서 모양
	WndClass.hInstance = hInstance;                                    // 원도우 클래스를 등록하는 프로그램 번호
	WndClass.lpfnWndProc = WndProc;                                    // 원도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass;                                // 원도우 클래스의 이름 지정
	WndClass.lpszMenuName = MAKEINTRESOURCE(IDR_MENU1);                // 이프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS;             // 원도우의 스타일을 정의
	RegisterClass(&WndClass);                                          // WNDCLASS 구조체의 번지를 전달

	// 원도우 생성
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
		NULL, (HMENU)NULL, hInstance, NULL);
	ShowWindow(hWnd, nCmdShow);
	// 메세지 루프를 실행

	while (GetMessage(&Message, NULL, 0, 0)) {                         // Queue에 있는 메세지를 읽어들인다.
		TranslateMessage(&Message);                                    // 키보드 입력 메세지를 가공하여 프로그램에서 쉅게 사용할수있도록
		DispatchMessage(&Message);                                     // 메세지를 원도우의 메세지 처리 함수 WndProc로 전달
	}
	return (int)Message.wParam;                                        // 탈출 코드 프로그램 종료
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	HBRUSH myBrush, oldBrush;
	static RECT rt;
	static int x, y, size, move;
	static int r, g, b, speed;
	static BOOL Circle, RED, BLUE, GREEN;

	switch (iMessage)
	{
	case WM_CREATE:
		Circle = RED = BLUE = GREEN = FALSE;
		x = y = 200;	size = 50;
		r = g = b = 0;	speed = 1000;
		move = 1;
		return 0;

	case WM_SIZE:
		GetClientRect(hWnd, &rt);
		return 0;

	case WM_COMMAND:
		switch (wParam)
		{
		case ID_START:		// 시작
			Circle = TRUE;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_STOP:		// 종료
			Circle = FALSE;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_FAST:		// 빠르게
			speed -= 500;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_SLOW:		// 느리게
			speed += 500;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_RED:		// 빨강
			r = 255;	g = b = 0;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_BLUE:		// 파랑
			b = 255;	r = g = 0;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_GREEN:		 // 초록
			g = 255;	r = b = 0;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		}
		return 0;

	case WM_TIMER:
		if (move == 1)
		{
			x += 10;
			y += 10;
			if (x >= rt.right)
				move = 4;
			if (y >= rt.bottom)
				move = 2;
		}
		else if (move == 2)
		{
			x += 10;
			y -= 10;
			if (x >= rt.right)
				move = 3;
			if (y <= rt.top)
				move = 1;
		}
		else if (move == 3)
		{
			x -= 10;
			y -= 10;
			if (x <= rt.left)
				move = 2;
			if (y <= rt.top)
				move = 4;

		}
		else if (move == 4)
		{
			x -= 10;
			y += 10;
			if (y >= rt.bottom)
				move = 3;
			if (x <= rt.left)
				move = 1;
		}


		InvalidateRect(hWnd, NULL, TRUE);
		return 0;

	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		
		if (Circle)
		{
			SetTimer(hWnd, 1, speed, NULL);
			myBrush = CreateSolidBrush(RGB(r, g, b));
			oldBrush = (HBRUSH)SelectObject(hdc, myBrush);
			Ellipse(hdc, x - size, y - size, x + size, y + size);
			SelectObject(hdc, oldBrush);
			DeleteObject(myBrush);	myBrush = CreateSolidBrush(RGB(r, g, b));
		}
		else 
		{
			KillTimer(hWnd, 1);
			InvalidateRect(hWnd, NULL, TRUE);
		}
		EndPaint(hWnd, &ps);
		return 0;

	case WM_DESTROY:
		PostQuitMessage(1);
		return 0;
	}
	return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}
