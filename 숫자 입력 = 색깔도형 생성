#include <windows.h> //윈도우 헤더파일
#include <math.h>
#define BSIZE 40 // 사이즈

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); //cALLBACK 매크로
HINSTANCE g_hInst;          //인스턴스 핸들
LPCTSTR lpszClass = TEXT("김연우_16032018");   //제목 표시줄의 내용

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance//main 함수
	, LPSTR lpszCmdParam, int nCmdShow)
{
	HWND hWnd;       //윈도우 핸들 선언
	MSG Message;      //메세지 구조체 변수 선언
	WNDCLASS WndClass;     //Windows Class 구조체 변수 선언
	g_hInst = hInstance;    //hlnstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0;   //예약 영역. 지금은 사용X
	WndClass.cbWndExtra = 0;   //예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); //윈도우의 배경 색상
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);     //윈도우의 마우스 포인터 모양
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);    //윈도우의 커서 모양
	WndClass.hInstance = hInstance;         //윈도우 클래스를 등록하는 프로그램 번호
	WndClass.lpfnWndProc = WndProc;         //윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass;        //윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL;         //이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS;   //윈도우의 스타일을 정의
	RegisterClass(&WndClass);          //WNDCLASS 구조체의 번지를 전달

									   //윈도우를 생성
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, /* 100,100,500,500 */
		NULL, (HMENU)NULL, hInstance, NULL);
	ShowWindow(hWnd, nCmdShow);


	//메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) { //Queue에 있는 메세지를 읽어들인다
		TranslateMessage(&Message);    //키보드 입력 메세지를 가공하여 프로그램에서 쉽게 사용할 수 있다
		DispatchMessage(&Message);    //메세지를 윈도우의 메세지 처리 함수 WndProc로 전달
	}
	return (int)Message.wParam;     //탈출 코드. 프로그램 종료
}

float LengthPts(int x1, int y1, int x2, int y2)
{
	return sqrt((float)(x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1));
}

BOOL InCircle(int x, int y, int mx, int my)
{
	if (LengthPts(x, y, mx, my) < BSIZE)return TRUE;
	else return FALSE;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	HPEN MyPen, OldPen;
	HBRUSH MyBrush, OldBrush;
	static BOOL one, two;
	static int x, y;

	switch(iMessage)
	{
	case WM_CREATE:
		one = FALSE; two = FALSE;
		x = 300; y = 300;
		return 0;
		
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		TextOut(hdc, 30, 50, L"1. 원", 4);
		TextOut(hdc, 30, 70, L"2. 사각형", 6);
		TextOut(hdc, 30, 90, L"3. 지우기", 6);

		if (one)
		{
			MyBrush = CreateSolidBrush(RGB(255, 0, 0));
			OldBrush = (HBRUSH)SelectObject(hdc, MyBrush);
			MyPen = CreatePen(PS_SOLID, 1, RGB(0, 255, 0));
			OldPen = (HPEN)SelectObject(hdc, MyPen);

			Ellipse(hdc, x - 50, y - 50, x + 50, y + 50);

			SelectObject(hdc,OldBrush);
			DeleteObject(MyBrush);
			SelectObject(hdc, OldPen);
			DeleteObject(MyPen);
		}
		else if (two)
		{
			MyBrush = CreateSolidBrush(RGB(255, 0, 0));
			OldBrush = (HBRUSH)SelectObject(hdc, MyBrush);
			MyPen = CreatePen(PS_SOLID, 1, RGB(0, 255, 0));
			OldPen = (HPEN)SelectObject(hdc, MyPen);

			Rectangle(hdc, x - 50, y - 50, x + 50, y + 50);

			SelectObject(hdc, OldBrush);
			DeleteObject(MyBrush);
			SelectObject(hdc, OldPen);
			DeleteObject(MyPen);
		}

		EndPaint(hWnd, &ps);
		return 0;
	
	case WM_KEYDOWN:
		switch (wParam)
		{
		case '1':
			one = TRUE;
			two = FALSE;
			break;
		case '2':
			one = FALSE;
			two = TRUE;
			break;
		case '3':
			one = FALSE;
			two = FALSE;
			break;
		}
		InvalidateRect(hWnd, NULL, TRUE);
		return 0;

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	}
	return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}
