#include <windows.h>
#include <math.h>

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);                  // CALLBACK 매크로
HINSTANCE g_hInst;                                                     // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("김연우_16032018");                           // 제목 표시줄의 내용 

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance
	, LPSTR lpszCmdParam, int nCmdShow)                                // main 함수
{
	HWND hWnd;                                                         // 원도우 핸들 선언
	MSG Message;                                                       // 메세지 구조체 변수 선언
	WNDCLASS WndClass;                                                 // Window Class 구조체 변수 선언
	g_hInst = hInstance;                                               // hinstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0;                                           // 예약 영역
	WndClass.cbWndExtra = 0;                                           // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);      // 원도우의 배경 색상 
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);                    // 원도우의 마우스 포인터 모양 
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);                  // 원도우의 커서 모양
	WndClass.hInstance = hInstance;                                    // 원도우 클래스를 등록하는 프로그램 번호
	WndClass.lpfnWndProc = WndProc;                                    // 원도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass;                                // 원도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL;                                      // 이프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS;             // 원도우의 스타일을 정의
	RegisterClass(&WndClass);                                          // WNDCLASS 구조체의 번지를 전달

	// 원도우 생성
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
		NULL, (HMENU)NULL, hInstance, NULL);
	ShowWindow(hWnd, nCmdShow);
	// 메세지 루프를 실행

	while (GetMessage(&Message, NULL, 0, 0)) {                         // Queue에 있는 메세지를 읽어들인다.
		TranslateMessage(&Message);                                    // 키보드 입력 메세지를 가공하여 프로그램에서 쉅게 사용할수있도록
		DispatchMessage(&Message);                                     // 메세지를 원도우의 메세지 처리 함수 WndProc로 전달
	}
	return (int)Message.wParam;                                        // 탈출 코드 프로그램 종료
}

float LengthPts(int x1, int y1, int x2, int y2)							// sqrt 수학함수
{
	return (sqrt((float)(x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)));
}

BOOL Catch(int x, int y, int mx, int my)
{
	if (LengthPts(x, y, mx, my) < 40) return TRUE;
	else return FALSE;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	HBRUSH myBrush, oldBrush;
	static int SIZE = 50;
	static bool UP, DOWN, LEFT, RIGHT;

	switch (iMessage)
	{
	case WM_CREATE:
		UP = FALSE;	DOWN = FALSE;
		LEFT = FALSE; RIGHT = FALSE;
		return 0;

	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);

		Rectangle(hdc, 400 - SIZE, 200 - SIZE, 400 + SIZE, 200 + SIZE);		// UP
		Rectangle(hdc, 400 - SIZE, 400 - SIZE, 400 + SIZE, 400 + SIZE);		// DOWN
		Rectangle(hdc, 300 - SIZE, 300 - SIZE, 300 + SIZE, 300 + SIZE);		// LEFT
		Rectangle(hdc, 500 - SIZE, 300 - SIZE, 500 + SIZE, 300 + SIZE);		// RIGHT

		if (UP == TRUE)
		{
			myBrush = CreateSolidBrush(RGB(255, 0, 0));
			oldBrush = (HBRUSH)SelectObject(hdc, myBrush);

			Rectangle(hdc, 400 - SIZE, 200 - SIZE, 400 + SIZE, 200 + SIZE);

			SelectObject(hdc, oldBrush);
			DeleteObject(myBrush);
		}
		else if (DOWN == TRUE)
		{
			myBrush = CreateSolidBrush(RGB(255, 0, 0));
			oldBrush = (HBRUSH)SelectObject(hdc, myBrush);

			Rectangle(hdc, 400 - SIZE, 400 - SIZE, 400 + SIZE, 400 + SIZE);

			SelectObject(hdc, oldBrush);
			DeleteObject(myBrush);

		}
		else if (LEFT == TRUE)
		{
			myBrush = CreateSolidBrush(RGB(255, 0, 0));
			oldBrush = (HBRUSH)SelectObject(hdc, myBrush);

			Rectangle(hdc, 300 - SIZE, 300 - SIZE, 300 + SIZE, 300 + SIZE);

			SelectObject(hdc, oldBrush);
			DeleteObject(myBrush);
		}
		else if (RIGHT == TRUE)
		{
			myBrush = CreateSolidBrush(RGB(255, 0, 0));
			oldBrush = (HBRUSH)SelectObject(hdc, myBrush);

			Rectangle(hdc, 500 - SIZE, 300 - SIZE, 500 + SIZE, 300 + SIZE);

			SelectObject(hdc, oldBrush);
			DeleteObject(myBrush);
		}
		EndPaint(hWnd, &ps);
		return 0;

	case WM_KEYDOWN:
		switch (wParam)
		{
		case VK_UP:
			UP = TRUE;
			break;

		case VK_DOWN:
			DOWN = TRUE;
			break;

		case VK_LEFT:
			LEFT = TRUE;
			break;

		case VK_RIGHT:
			RIGHT = TRUE;
			break;
		}
		InvalidateRect(hWnd, NULL, TRUE);
		return 0;

	case WM_KEYUP:
		switch (wParam)
		{
		case VK_UP:
			UP = FALSE;
			break;

		case VK_DOWN:
			DOWN = FALSE;
			break;

		case VK_LEFT:
			LEFT = FALSE;
			break;

		case VK_RIGHT:
			RIGHT = FALSE;
			break;
		}
		InvalidateRect(hWnd, NULL, TRUE);
		return 0;

	case WM_DESTROY:
		PostQuitMessage(1);
		return 0;
	}
	return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}
