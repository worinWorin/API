#include <windows.h>
#include <time.h>

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);//CALLBACK 매크로
HINSTANCE g_hInst;//인스턴스 핸들
LPCTSTR lpszClass = TEXT("김연우_16032018");//제목 표시줄 내용

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance// 윈도우 매인 기본틀
	, LPSTR lpszCmdParam, int nCmdShow)// main  함수
{
	HWND hWnd; //윈도우 핸들 선언
	MSG Message;//메세지 구조체 변수 선언
	WNDCLASS WndClass;//windows class 구조체 변수 선언   
	g_hInst = hInstance;//hlnstance  값을 외부에서도 사용할수 있도록 전역 변수에 값을 저장

	WndClass.cbClsExtra = 0; //예약 영역 , 지금은 사용 x
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);//배경색 색깔을 고르려면 WHITE_BRUSH f12 (윈도우 배경색깔
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);//마우스 포인터 모양 IDC_ARROW f12 (윈도우 마우스 포인터 모양
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);//커서 모양  IDI_APPLICATION f12 (글씨 쓰는자리 아이콘) (윈도우의 커서모양 
	WndClass.hInstance = hInstance;//윈도우 클래스를 등록하는 프로그램 번호
	WndClass.lpfnWndProc = WndProc;//윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass;//윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL; //이프로그램의 메뉴지정
	WndClass.style = CS_HREDRAW | CS_VREDRAW;//윈도우 스타일을 정의
	RegisterClass(&WndClass);//WndClass 구조체의 번지를 전달

	//윈도우를 생성
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW,// 및옵션을 기준으로 창생성 
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,// CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT 을 주석 처리한뒤 => 100,100,300,500,   입력  (창크기조절) 
		NULL, (HMENU)NULL, hInstance, NULL);
	ShowWindow(hWnd, nCmdShow);
	//메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) { // Queue 에 있는 메세지를 읽어들인다
		TranslateMessage(&Message);//키보드 입력 메세지를 가공하여 프로그램에서 쉽게 사용
		DispatchMessage(&Message);//메세지를 윈도우의 메세지 처리 함수 wndproc 로 전달
	}
	return (int)Message.wParam; //탈출코드  프로그램 종료
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	HBRUSH MyBrush, OldBrush;
	HPEN MyPen, OldPen;
	static RECT rt;
	static bool START = FALSE;
	static int x, y, br, bg, bb, pr, pg, pb;
	

	switch (iMessage)
	{
	case WM_SIZE:
		GetClientRect(hWnd, &rt);		// window 창 크기 설정
		return 0;

	case WM_KEYDOWN:
		switch (wParam)
		{
		case VK_RETURN:
			START = TRUE;						// START 가 TRUE 이면
			SetTimer(hWnd, 1, 200, NULL);		// 타이머 설정
			MessageBeep(1);						
			break;
			
		case VK_ESCAPE:
			if (MessageBox(hWnd, L"종료 하시겠습니까?", L"종료", MB_OKCANCEL) == IDOK)	// ok 클릭하면
			{
				exit(1);
				KillTimer(hWnd, 1);	// 타이머 죽이기
			}
			break;
		}
		return 0;

	case WM_TIMER:
		x = rand() % rt.right;			// x 좌표 랜덤
		y = rand() % rt.bottom;			// y 좌표 랜덤
		br = rand() % 256;  pr = rand() % 256;
		bg = rand() % 256;	pg = rand() % 256;
		bb = rand() % 256;	pb = rand() % 256;
		InvalidateRect(hWnd, NULL, TRUE);
		return 0;

	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);

		if (START == TRUE)
		{
			MyBrush = CreateSolidBrush(RGB(br, bg, bb));		// 새로운 브러쉬 생성
			OldBrush = (HBRUSH)SelectObject(hdc, MyBrush);		// 원래있던 브러쉬을 새로운 브러쉬로 교체
			MyPen = CreatePen(PS_SOLID, 3, RGB(pr, pg, pb));	// 새로운 팬 생성
			OldPen = (HPEN)SelectObject(hdc, MyPen);			// 원래있던 팬을 새로운 팬으로 교체

			Ellipse(hdc, x - 40, y - 40, x + 40, y + 40);		// 원 생성 

			SelectObject(hdc, OldBrush);		// 다시 원래있던 브러쉬로 설정
			DeleteObject(MyBrush);				// 새로운브러쉬 삭제
			SelectObject(hdc, OldPen);			// 다시 원래있던 펜으로 설정
			DeleteObject(MyPen);				// 새로운팬 삭제
		}

		EndPaint(hWnd, &ps);
		return 0;


	case WM_DESTROY:
		PostQuitMessage(0); //종료
		return 0;
	}
	return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}
