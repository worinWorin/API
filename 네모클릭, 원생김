#include <windows.h> //윈도우 헤더파일
#include <math.h>
#define BSIZE 40 // 사이즈

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); //cALLBACK 매크로
HINSTANCE g_hInst;          //인스턴스 핸들
LPCTSTR lpszClass = TEXT("김연우_16032018");   //제목 표시줄의 내용

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance//main 함수
	, LPSTR lpszCmdParam, int nCmdShow)
{
	HWND hWnd;       //윈도우 핸들 선언
	MSG Message;      //메세지 구조체 변수 선언
	WNDCLASS WndClass;     //Windows Class 구조체 변수 선언
	g_hInst = hInstance;    //hlnstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0;   //예약 영역. 지금은 사용X
	WndClass.cbWndExtra = 0;   //예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); //윈도우의 배경 색상
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);     //윈도우의 마우스 포인터 모양
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);    //윈도우의 커서 모양
	WndClass.hInstance = hInstance;         //윈도우 클래스를 등록하는 프로그램 번호
	WndClass.lpfnWndProc = WndProc;         //윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass;        //윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL;         //이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS;   //윈도우의 스타일을 정의
	RegisterClass(&WndClass);          //WNDCLASS 구조체의 번지를 전달

									   //윈도우를 생성
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, /* 100,100,500,500 */
		NULL, (HMENU)NULL, hInstance, NULL);
	ShowWindow(hWnd, nCmdShow);


	//메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) { //Queue에 있는 메세지를 읽어들인다
		TranslateMessage(&Message);    //키보드 입력 메세지를 가공하여 프로그램에서 쉽게 사용할 수 있다
		DispatchMessage(&Message);    //메세지를 윈도우의 메세지 처리 함수 WndProc로 전달
	}
	return (int)Message.wParam;     //탈출 코드. 프로그램 종료
}

float LengthPts(int x1, int y1, int x2, int y2)
{
	return sqrt((float)(x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1));
}

BOOL InCircle(int x, int y, int mx, int my)
{
	if (LengthPts(x, y, mx, my) < BSIZE)return TRUE;
	else return FALSE;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	static int x[8] = { 40,120,200,280,360,440,520,600 };  //	x좌표
	static int y[4] = { 40,120,200,280 };                  //	y좌표
	static int mx;
	static int my;
	static BOOL Block = TRUE;                               //바둑판 ON,OFF

	switch (iMessage) 
	{
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		if (Block == TRUE)                                  //one 변수가 TRUE 일 경우 바둑판을 그린다.
		{
			for (int i = 0; i < 4; i++)				// 4행
			{
				for (int j = 0; j < 8; j++)			// 8열
				{
					Rectangle(hdc, x[j] - 40, y[i] - 40, x[j] + 40, y[i] + 40); // for 문으로 바둑판 모양 생성
				}
			}
			Block = FALSE;                                  //바둑판을 한번 그린뒤에 one변수를 FALSE로 전환한다.
		}
		for (int i = 0; i < 4; i++)                       //배열의 좌표값에 맟춰서 바둑판에 원을 채워넣는다.
		{
			for (int j = 0; j < 8; j++)
			{
				if (InCircle(x[j], y[i], mx, my))		// 안쪽을 클릭하는지 확인
				{
					Ellipse(hdc, x[j] - 40, y[i] - 40, x[j] + 40, y[i] + 40);		// 원그리기
				}

			}
		}
		EndPaint(hWnd, &ps);
		return 0;

	case WM_LBUTTONDOWN:                                  //좌클릭 했을경우 좌표값을 가져온다.
		mx = LOWORD(lParam);
		my = HIWORD(lParam);
		InvalidateRect(hWnd, NULL, FALSE);
		return 0;

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	}
	return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}
